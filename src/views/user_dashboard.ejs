<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= activeTab === 'spares' ? 'Spares' : 'User Dashboard' %> | Olam Agri IT Inventory</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body { background: #f8fafc; min-height: 100vh; }
    .sidebar { background: #fff; min-height: 100vh; box-shadow: 2px 0 8px rgba(0,0,0,0.04); padding: 2rem 1rem 1rem 1rem; position: fixed; left: 0; top: 0; width: 220px; z-index: 100; display: flex; flex-direction: column; gap: 2rem; }
    .sidebar .logo { width: 50px; height: 30px; margin-bottom: 0.5rem; }
    .sidebar .brand-title { font-size: 1.5rem; font-weight: 700; color: #222; margin-bottom: 0.2rem; letter-spacing: -1px; }
    .sidebar .brand-sub { font-size: 1rem; font-weight: 700; color: #009688; margin-bottom: 1.2rem; }
    .sidebar-nav { list-style: none; padding: 0; margin: 0; display: flex; flex-direction: column; gap: 1.2rem; }
    .sidebar-nav li a { color: #222; text-decoration: none; font-weight: 600; font-size: 1.05rem; display: flex; align-items: center; gap: 0.7rem; padding: 0.4rem 0.7rem; border-radius: 6px; transition: background 0.2s, color 0.2s; }
    .sidebar-nav li a.active, .sidebar-nav li a:hover { background: #009688; color: #fff; }
    .main-content { margin-left: 220px; padding: 2rem 2rem 1rem 2rem; }
    .topbar { display: flex; align-items: center; justify-content: space-between; margin-bottom: 2rem; flex-wrap: wrap; }
    .topbar .user-info { display: flex; align-items: center; gap: 1rem; }
    .topbar .user-avatar { width: 38px; height: 38px; border-radius: 50%; background: #e0e0e0; display: flex; align-items: center; justify-content: center; font-size: 1.3rem; color: #009688; font-weight: 700; }
    .table-section { background: #fff; border-radius: 12px; box-shadow: 0 2px 12px rgba(0,0,0,0.04); padding: 1.5rem 1.2rem; margin-bottom: 2rem; }
    .table-section .section-title { font-size: 1.2rem; font-weight: 700; color: #222; margin-bottom: 1rem; }
    .table-responsive { max-width: 100vw; overflow-x: auto; }
    th, td { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 220px; vertical-align: middle; }
    .btn-add { background: #009688; color: #fff; transition: all 0.2s; }
    .btn-add:hover { background: #00796b; color: #fff; }
    @media (max-width: 1200px) { .main-content { padding: 1rem; } .table-section { padding: 1rem 0.5rem; } th, td { font-size: 0.95rem; } }
    @media (max-width: 900px) { .main-content { margin-left: 0; padding: 1rem; } .sidebar { position: static; width: 100%; min-height: auto; flex-direction: row; gap: 1rem; padding: 1rem; } .table-section { padding: 1rem 0.5rem; } th, td { font-size: 0.92rem; } .sidebar { padding: 1rem 0.5rem; } }
    @media (max-width: 600px) { .main-content { padding: 0.5rem; } .sidebar { flex-direction: column; align-items: flex-start; } .table-section { padding: 0.5rem 0.2rem; } th, td { font-size: 0.85rem; } .sidebar { padding: 1rem 0.5rem; } .topbar { flex-direction: column; align-items: flex-start; gap: 0.5rem; } .table-responsive { padding: 0; } .modal-dialog { max-width: 98vw; margin: 0.5rem auto; } .modal-content { border-radius: 10px; } .btn-add { width: 100%; margin-bottom: 0.5rem; font-size: 1.1rem; padding: 0.8rem 0; } .d-flex.justify-content-between.align-items-center.mb-3 { flex-direction: column; align-items: stretch !important; gap: 0.5rem; } }
    @media (max-width: 400px) { .main-content { padding: 0.2rem; } .table-section { padding: 0.2rem 0.05rem; } th, td { font-size: 0.78rem; } }
  </style>
</head>
<body>
  <aside class="sidebar">
    <div style="display: flex; flex-direction: column; align-items: center; justify-content: center;">
      <img src="/images/olam_logo.png" alt="Olam Agri Logo" class="logo">
      <div class="brand-title" style="text-align: center;">Olam Agri</div>
      <div class="brand-sub" style="text-align: center;">IT Inventory</div>
    </div>
    <ul class="sidebar-nav">
      <li><a href="/user/dashboard" class="<%= (activeTab === 'dashboard') ? 'active' : '' %>"><i class="fa fa-gauge"></i> Active</a></li>
      <li><a href="/user/spares" class="<%= (activeTab === 'spares') ? 'active' : '' %>"><i class="fa fa-archive"></i> Spares</a></li>
      <li><a href="/user/scrap" class="<%= (activeTab === 'scrap') ? 'active' : '' %>"><i class="fa fa-recycle"></i> Scrap</a></li>
      <li><a href="/user/deleted" class="<%= (activeTab === 'deleted') ? 'active' : '' %>"><i class="fa fa-trash"></i> Deleted Items</a></li>
      <li><a href="/logout"><i class="fa fa-sign-out-alt"></i> Logout</a></li>
    </ul>
  </aside>

  <main class="main-content">
    <div class="topbar">
      <div style="display: flex; align-items: center; width: 100%; justify-content: space-between; flex-wrap: wrap; gap: 1rem;">
        <h2 class="mb-0"><%= activeTab.charAt(0).toUpperCase() + activeTab.slice(1) %></h2>
        <div style="display: flex; align-items: center; gap: 0.7rem; flex-wrap: wrap; margin: 0 auto;">
          <div class="input-group input-group-sm" style="width: 96px;">
            <input id="searchBar" class="form-control" type="text" placeholder="Search inventory...">
            <button id="searchBtn" class="btn btn-outline-success" type="button"><i class="fa fa-search" style="color: green;"></i></button>
          </div>
          <select id="deviceTypeSort" class="form-select form-select-sm" style="width: 68px; min-width: 68px;">
            <option value="">Sort by Device Type</option>
            <option>Laptop</option><option>Desktop</option><option>Monitor</option><option>Printer</option>
          </select>
        </div>
      <div class="user-info">
        <div class="user-avatar"><i class="fa fa-user"></i></div>
        <span class="fw-bold"><%= user && user.username ? user.username : 'User' %></span>
        </div>
      </div>
    </div>

    <% if (activeTab === 'dashboard') { %>
    <div class="dashboard-cards" style="display: flex; gap: 1.2rem; flex-wrap: wrap; margin: 1.5rem 0 1rem 0;">
        <div class="dashboard-card" style="background:#fff; border-radius:12px; box-shadow:0 2px 12px rgba(0,0,0,0.04); padding:1.2rem 1.5rem; min-width:170px; flex:1 1 170px;"><div class="card-title" style="font-size:1.05rem; color:#888;">Inventory Items</div><div class="card-value" id="cardInventoryItems" style="font-size:1.5rem; font-weight:700; color:#009688;">0</div></div>
        <div class="dashboard-card" style="background:#fff; border-radius:12px; box-shadow:0 2px 12px rgba(0,0,0,0.04); padding:1.2rem 1.5rem; min-width:170px; flex:1 1 170px;"><div class="card-title" style="font-size:1.05rem; color:#888;">Active Devices</div><div class="card-value" id="cardActiveDevices" style="font-size:1.5rem; font-weight:700; color:#009688;">0</div></div>
        <div class="dashboard-card" style="background:#fff; border-radius:12px; box-shadow:0 2px 12px rgba(0,0,0,0.04); padding:1.2rem 1.5rem; min-width:170px; flex:1 1 170px;"><div class="card-title" style="font-size:1.05rem; color:#888;">Spares</div><div class="card-value" id="cardSparesDevices" style="font-size:1.5rem; font-weight:700; color:#009688;">0</div></div>
        <div class="dashboard-card" style="background:#fff; border-radius:12px; box-shadow:0 2px 12px rgba(0,0,0,0.04); padding:1.2rem 1.5rem; min-width:170px; flex:1 1 170px;"><div class="card-title" style="font-size:1.05rem; color:#888;">Scrap</div><div class="card-value" id="cardScrapDevices" style="font-size:1.5rem; font-weight:700; color:#009688;">0</div></div>
        <div class="dashboard-card" style="background:#fff; border-radius:12px; box-shadow:0 2px 12px rgba(0,0,0,0.04); padding:1.2rem 1.5rem; min-width:170px; flex:1 1 170px;"><div class="card-title" style="font-size:1.05rem; color:#888;">Laptops</div><div class="card-value" id="cardLaptops" style="font-size:1.5rem; font-weight:700; color:#009688;">0</div></div>
        <div class="dashboard-card" style="background:#fff; border-radius:12px; box-shadow:0 2px 12px rgba(0,0,0,0.04); padding:1.2rem 1.5rem; min-width:170px; flex:1 1 170px;"><div class="card-title" style="font-size:1.05rem; color:#888;">Desktops</div><div class="card-value" id="cardDesktops" style="font-size:1.5rem; font-weight:700; color:#009688;">0</div></div>
        <div class="dashboard-card" style="background:#fff; border-radius:12px; box-shadow:0 2px 12px rgba(0,0,0,0.04); padding:1.2rem 1.5rem; min-width:170px; flex:1 1 170px;"><div class="card-title" style="font-size:1.05rem; color:#888;">Monitors</div><div class="card-value" id="cardMonitors" style="font-size:1.5rem; font-weight:700; color:#009688;">0</div></div>
        <div class="dashboard-card" style="background:#fff; border-radius:12px; box-shadow:0 2px 12px rgba(0,0,0,0.04); padding:1.2rem 1.5rem; min-width:170px; flex:1 1 170px;"><div class="card-title" style="font-size:1.05rem; color:#888;">Printers</div><div class="card-value" id="cardPrinters" style="font-size:1.5rem; font-weight:700; color:#009688;">0</div></div>
        <div class="dashboard-card" style="background:#fff; border-radius:12px; box-shadow:0 2px 12px rgba(0,0,0,0.04); padding:1.2rem 1.5rem; min-width:170px; flex:1 1 170px;"><div class="card-title" style="font-size:1.05rem; color:#888;">Deleted Items</div><div class="card-value" id="cardDeletedItems" style="font-size:1.5rem; font-weight:700; color:#d32f2f;">0</div></div>
      </div>
    <% } %>

    <div class="table-section">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <div class="section-title mb-0"><%= activeTab === 'spares' ? 'Spares' : 'Inventory' %> Sheet <span style="color: orange; font-weight: 600;">for <%= user && user.location ? user.location : '' %></span></div>
        <% if (activeTab === 'dashboard') { %>
        <button class="btn btn-add" data-bs-toggle="modal" data-bs-target="#addInventoryDashboardModal"><i class="fa fa-plus"></i> Add Row</button>
        <% } %>
      </div>
      <div class="table-responsive">
        <table class="table table-bordered align-middle" id="userDashboardInventoryTable">
          <thead class="table-light">
            <tr>
              <th>S/N</th><th>IT SPOC</th><th>User email ID</th><th>User type</th><th>Name of user</th><th>Email id</th><th>Device type</th><th>Device brand</th><th>Device model</th><th>Hostname</th><th>Windows</th><th>Windows type</th><th>SAP user</th><th>Microsoft Office</th><th>Serial number</th><th>System RAM</th><th>System ROM</th><th>Hard drive type</th><th>Department</th><th>Location</th><th>Zscaler</th><th>Trellix</th><th>SCCM</th><th>Ivanti</th><th>BitLocker</th><th>Secure login</th><th>Joined to Olam domain</th><th>PO</th><th>Invoice number</th><th>Purchase date</th><th>Warranty</th><th>HR</th>
              <% if (activeTab === 'spares' || activeTab === 'scrap' || activeTab === 'deleted') { %>
                <th>Description</th>
              <% } %>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="userDashboardInventoryTableBody"></tbody>
        </table>
      </div>
    </div>
  </main>

  <!-- Modals -->
  <div class="modal fade" id="addInventoryDashboardModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog"><div class="modal-content"><form id="addInventoryDashboardForm"><div class="modal-header"><h5 class="modal-title">Add Inventory Row</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body"><div class="mb-3"><label class="form-label">IT SPOC</label><input type="text" class="form-control" name="itSpoc" value="<%= user && user.username ? user.username : '' %>" readonly required></div><div class="mb-3"><label class="form-label">User type</label><select class="form-select" name="userType" id="userTypeSelect" required><option>Single</option><option>Multiple</option></select></div><div class="mb-3"><label class="form-label">Name of user</label><input type="text" class="form-control" name="userName" required></div><div class="mb-3"><label class="form-label">Email id</label><input type="email" class="form-control" name="emailId" required></div><div id="userFieldsContainer"></div><div id="addUserBtnContainer" style="display:none;"><button type="button" class="btn btn-outline-success btn-sm" id="addUserFieldBtn"><i class="fa fa-plus"></i> Add</button></div><div id="doneUserFieldsContainer" style="display:none;"><button type="button" class="btn btn-primary btn-sm" id="doneUserFieldsBtn">Done</button></div><div class="mb-3"><label class="form-label">Device type</label><select class="form-select" name="deviceType" required><option value="">--select--</option><option>Laptop</option><option>Desktop</option><option>Monitor</option><option>Printer</option></select></div><div class="mb-3"><label class="form-label">Device brand</label><input type="text" class="form-control" name="deviceBrand"></div><div class="mb-3"><label class="form-label">Device model</label><input type="text" class="form-control" name="deviceModel"></div><div class="mb-3"><label class="form-label">Hostname</label><input type="text" class="form-control" name="hostname"></div><div class="mb-3"><label class="form-label">Windows</label><select class="form-select" name="windows"><option value="">--select--</option><option>10</option><option>11</option></select></div><div class="mb-3"><label class="form-label">Windows type</label><select class="form-select" name="windowsType"><option value="">--select--</option><option>Windows Home</option><option>Windows Pro</option><option>Windows Enterprise</option><option>Windows Education</option><option>Windows Pro for Workstations</option><option>Windows Server 2016</option><option>Windows Server 2019</option><option>Windows Server 2022</option></select></div><div class="mb-3"><label class="form-label">SAP user</label><select class="form-select" name="sapUser"><option value="">--select--</option><option>Yes</option><option>No</option></select></div><div class="mb-3"><label class="form-label">Microsoft Office</label><select class="form-select" name="microsoftOffice"><option value="">--select--</option><option>Yes</option><option>No</option></select></div><div class="mb-3"><label class="form-label">Serial number</label><input type="text" class="form-control" name="serialNumber"></div><div class="mb-3"><label class="form-label">System RAM</label><input type="text" class="form-control" name="ram"></div><div class="mb-3"><label class="form-label">System ROM</label><input type="text" class="form-control" name="rom"></div><div class="mb-3"><label class="form-label">Hard drive type</label><select class="form-select" name="hardDriveType"><option value="">--select--</option><option>HDD</option><option>SSD</option></select></div><div class="mb-3"><label class="form-label">Department</label><input type="text" class="form-control" name="department"></div><div class="mb-3"><label class="form-label">Location</label><input type="text" class="form-control" name="location" value="<%= user && user.location ? user.location : '' %>" readonly></div><div class="mb-3"><label class="form-label">Zscaler</label><select class="form-select" name="zscaler"><option value="">--select--</option><option>Yes</option><option>No</option></select></div><div class="mb-3"><label class="form-label">Trellix</label><select class="form-select" name="trellix"><option value="">--select--</option><option>Yes</option><option>No</option></select></div><div class="mb-3"><label class="form-label">SCCM</label><select class="form-select" name="sccm"><option value="">--select--</option><option>Yes</option><option>No</option></select></div><div class="mb-3"><label class="form-label">Ivanti</label><select class="form-select" name="ivanti"><option value="">--select--</option><option>Yes</option><option>No</option></select></div><div class="mb-3"><label class="form-label">BitLocker</label><select class="form-select" name="bitLocker"><option value="">--select--</option><option>Yes</option><option>No</option></select></div><div class="mb-3"><label class="form-label">Secure login</label><select class="form-select" name="secureLogin"><option value="">--select--</option><option>Yes</option><option>No</option></select></div><div class="mb-3"><label class="form-label">Joined to Olam domain</label><select class="form-select" name="joinedToOlamDomain"><option value="">--select--</option><option>Yes</option><option>No</option></select></div><div class="mb-3"><label class="form-label">PO</label><input type="text" class="form-control" name="po"></div><div class="mb-3"><label class="form-label">Invoice number</label><input type="text" class="form-control" name="invoiceNumber"></div><div class="mb-3"><label class="form-label">Purchase date</label><input type="date" class="form-control" name="purchaseDate"></div><div class="mb-3"><label class="form-label">Warranty</label><input type="text" class="form-control" name="warranty"></div><div class="mb-3"><label class="form-label">HR</label><input type="text" class="form-control" name="hr"></div></div><div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button><button type="submit" class="btn btn-add">Add Row</button></div></form></div></div>
          </div>
  <div class="modal fade" id="editInventoryDashboardModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog"><div class="modal-content"><form id="editInventoryDashboardForm"><div class="modal-header"><h5 class="modal-title">Edit Inventory Row</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body" id="editInventoryDashboardModalBody"></div><div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button><button type="submit" class="btn btn-primary">Save Changes</button></div></form></div></div>
            </div>
  <div class="modal fade" id="moveInventoryDashboardModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog"><div class="modal-content"><form id="moveInventoryDashboardForm"><div class="modal-header"><h5 class="modal-title">Move Inventory Row</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body" id="moveInventoryDashboardModalBody"></div><div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button><button type="submit" class="btn btn-warning">Move</button></div></form></div></div>
  </div>
  <div class="modal fade" id="moveToScrapInventoryDashboardModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog"><div class="modal-content"><form id="moveToScrapInventoryDashboardForm"><div class="modal-header"><h5 class="modal-title">Move Inventory Row to Scrap</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body" id="moveToScrapInventoryDashboardModalBody"></div><div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button><button type="submit" class="btn btn-danger">Move to Scrap</button></div></form></div></div>
  </div>
  <!-- Add Delete Inventory Modal after Move to Scrap Modal -->
<div class="modal fade" id="deleteInventoryDashboardModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog"><div class="modal-content"><form id="deleteInventoryDashboardForm"><div class="modal-header"><h5 class="modal-title">Delete Inventory Row</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body" id="deleteInventoryDashboardModalBody"></div><div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button><button type="submit" class="btn btn-danger">Delete</button></div></form></div></div>
</div>

<!-- Add Transfer Inventory Modal -->
<div class="modal fade" id="transferInventoryDashboardModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
            <form id="transferInventoryDashboardForm">
          <div class="modal-header">
                    <h5 class="modal-title">Transfer Inventory Row</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
                <div class="modal-body" id="transferInventoryDashboardModalBody">
                    <!-- Content will be injected by JS -->
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Transfer</button>
          </div>
        </form>
      </div>
    </div>
  </div>

<script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    const socket = io();
    const currentUser = JSON.parse('<%- JSON.stringify(user || null) %>');

    if (currentUser) {
        socket.on('connect', () => {
            socket.emit('register', currentUser.id);
        });
    }

    const activeTab = '<%= activeTab %>';
    let allInventoryRows = [];

    async function fetchInventoryRows() {
      const statuses = ['active', 'spares', 'deleted', 'scrap'];
      const requests = statuses.map(status => fetch(`/api/user-dashboard/inventory?status=${status}`, { credentials: 'same-origin' }));
      const responses = await Promise.all(requests);
      const data = await Promise.all(responses.map(res => res.ok ? res.json() : []));
      
      allInventoryRows = data.flat();
    renderInventoryRows();
      if (activeTab === 'dashboard') {
        updateDashboardCards();
      }
    }

    function renderInventoryRows() {
      const tbody = document.getElementById('userDashboardInventoryTableBody');
      tbody.innerHTML = '';
      
      let itemsToRender = [];
      if (activeTab === 'dashboard') {
        itemsToRender = allInventoryRows.filter(item => item.status === 'active' || !item.status);
      } else if (activeTab === 'spares') {
        itemsToRender = allInventoryRows.filter(item => item.status === 'spares');
      } else if (activeTab === 'scrap') {
        itemsToRender = allInventoryRows.filter(item => item.status === 'scrap');
      } else if (activeTab === 'deleted') {
        itemsToRender = allInventoryRows.filter(item => item.status === 'deleted');
      }

      const search = document.getElementById('searchBar').value.toLowerCase();
      const deviceType = document.getElementById('deviceTypeSort').value;

      if (search) {
        itemsToRender = itemsToRender.filter(item => Object.values(item).some(val => (val + '').toLowerCase().includes(search)));
      }
      if (deviceType) {
        itemsToRender = itemsToRender.filter(item => item.deviceType === deviceType);
      }
      
      itemsToRender.forEach((item, i) => {
        const tr = document.createElement('tr');
        let actionButtons = '';
        if (activeTab === 'spares') {
          actionButtons = `<button class='btn btn-sm btn-success' onclick='restoreInventoryRow(${item.id})' title='Restore'><i class="fa fa-undo"></i></button> <button class='btn btn-sm' style='background: #800080; color: #fff;' onclick='openMoveToScrapModal(${JSON.stringify(item)})' title='Move to Scrap'><i class="fa fa-recycle"></i></button>`;
        } else if (activeTab === 'scrap') {
          actionButtons = `<button class='btn btn-sm btn-success' onclick='restoreInventoryRow(${item.id})' title='Restore'><i class="fa fa-undo"></i></button> <button class='btn btn-sm btn-danger' onclick='openDeleteInventoryModal(${JSON.stringify(item)})' title='Delete'><i class="fa fa-trash"></i></button>`;
        } else if (activeTab === 'deleted') {
          actionButtons = `<button class='btn btn-sm btn-success' onclick='restoreInventoryRow(${item.id})' title='Restore'><i class="fa fa-undo"></i></button>`;
        } else {
          actionButtons = `<button class='btn btn-sm btn-primary' onclick='openEditInventoryModal(${JSON.stringify(item)})' title='Edit'><i class="fa fa-edit"></i></button> <button class='btn btn-sm btn-warning' onclick='openMoveInventoryModal(${JSON.stringify(item)})' title='Move to Spares'><i class="fa fa-exchange-alt"></i></button> <button class='btn btn-sm' style='background: #800080; color: #fff;' onclick='openMoveToScrapModal(${JSON.stringify(item)})' title='Move to Scrap'><i class="fa fa-recycle"></i></button> <button class='btn btn-sm btn-danger' onclick='openDeleteInventoryModal(${JSON.stringify(item)})' title='Delete'><i class="fa fa-trash"></i></button> <button class='btn btn-sm btn-info' onclick='openTransferInventoryModal(${JSON.stringify(item)})' title='Transfer'><i class="fa fa-paper-plane"></i></button>`;
        }

        tr.innerHTML = `
          <td>${i + 1}</td><td>${item.itSpoc || ''}</td><td>${item.userEmail || ''}</td><td>${item.userType || ''}</td><td>${item.userName || ''}</td><td>${item.emailId || ''}</td><td>${item.deviceType || ''}</td><td>${item.deviceBrand || ''}</td><td>${item.deviceModel || ''}</td><td>${item.hostname || ''}</td><td>${item.windows || ''}</td><td>${item.windowsType || ''}</td><td>${item.sapUser || ''}</td><td>${item.microsoftOffice || ''}</td><td>${item.serialNumber || ''}</td><td>${item.ram || ''}</td><td>${item.rom || ''}</td><td>${item.hardDriveType || ''}</td><td>${item.department || ''}</td><td>${item.location || ''}</td><td>${item.zscaler || ''}</td><td>${item.trellix || ''}</td><td>${item.sccm || ''}</td><td>${item.ivanti || ''}</td><td>${item.bitLocker || ''}</td><td>${item.secureLogin || ''}</td><td>${item.joinedToOlamDomain || ''}</td><td>${item.po || ''}</td><td>${item.invoiceNumber || ''}</td><td>${item.purchaseDate || ''}</td><td>${item.warranty || ''}</td><td>${item.hr || ''}</td>
          ${(activeTab === 'spares' || activeTab === 'scrap' || activeTab === 'deleted') ? `<td>${item.description || ''}</td>` : ''}
          <td>${actionButtons}</td>
        `;
        tbody.appendChild(tr);
      });
    }

    function updateDashboardCards() {
        document.getElementById('cardInventoryItems').textContent = allInventoryRows.length;
        document.getElementById('cardActiveDevices').textContent = allInventoryRows.filter(item => item.status === 'active' || !item.status).length;
        document.getElementById('cardSparesDevices').textContent = allInventoryRows.filter(item => item.status === 'spares').length;
        document.getElementById('cardDeletedItems').textContent = allInventoryRows.filter(item => item.status === 'deleted').length;
        document.getElementById('cardScrapDevices').textContent = allInventoryRows.filter(item => item.status === 'scrap').length;
        document.getElementById('cardLaptops').textContent = allInventoryRows.filter(item => item.deviceType === 'Laptop').length;
        document.getElementById('cardDesktops').textContent = allInventoryRows.filter(item => item.deviceType === 'Desktop').length;
        document.getElementById('cardMonitors').textContent = allInventoryRows.filter(item => item.deviceType === 'Monitor').length;
        document.getElementById('cardPrinters').textContent = allInventoryRows.filter(item => item.deviceType === 'Printer').length;
    }

    document.getElementById('searchBar').addEventListener('input', renderInventoryRows);
    document.getElementById('deviceTypeSort').addEventListener('change', renderInventoryRows);
    
    // Add form submission logic
      document.getElementById('addInventoryDashboardForm').onsubmit = async function(e) {
        e.preventDefault();
        const form = e.target;
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        
        const btn = form.querySelector('button[type="submit"]');
        btn.disabled = true;
        btn.textContent = 'Adding...';
        
        try {
          const res = await fetch('/api/inventory', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'same-origin',
            body: JSON.stringify(data)
          });
          if (res.ok) {
            form.reset();
            bootstrap.Modal.getInstance(document.getElementById('addInventoryDashboardModal')).hide();
            fetchInventoryRows();
            alert('Inventory row added successfully!');
          } else {
            const err = await res.json();
            alert(err.error || 'Failed to add inventory row');
          }
        } catch (err) {
            alert('Network error');
        } finally {
          btn.disabled = false;
          btn.textContent = 'Add Row';
        }
    };
    
    document.getElementById('editInventoryDashboardForm').onsubmit = async function(e) {
      e.preventDefault();
      const form = e.target;
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      const id = data.id;
      delete data.id;
      
      const btn = form.querySelector('button[type="submit"]');
      btn.disabled = true;
      btn.textContent = 'Saving...';
      
      try {
        const res = await fetch(`/api/inventory/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'same-origin',
          body: JSON.stringify(data)
        });
        if (res.ok) {
          bootstrap.Modal.getInstance(document.getElementById('editInventoryDashboardModal')).hide();
          fetchInventoryRows();
          alert('Inventory row updated successfully!');
        } else {
          const err = await res.json();
          alert(err.error || 'Failed to update inventory row');
        }
      } catch (err) {
        alert('Network error');
      } finally {
        btn.disabled = false;
        btn.textContent = 'Save Changes';
      }
    };

    document.getElementById('moveInventoryDashboardForm').onsubmit = async function(e) {
      e.preventDefault();
      const form = e.target;
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      data.status = 'spares';
      const id = data.id;
      delete data.id;

      const btn = form.querySelector('button[type="submit"]');
      btn.disabled = true;
      btn.textContent = 'Moving...';

      try {
        const res = await fetch(`/api/inventory/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'same-origin',
          body: JSON.stringify(data)
        });
        if (res.ok) {
          bootstrap.Modal.getInstance(document.getElementById('moveInventoryDashboardModal')).hide();
          fetchInventoryRows();
          alert('Inventory row moved to spares!');
        } else {
          const err = await res.json();
          alert(err.error || 'Failed to move inventory row');
        }
      } catch (err) {
        alert('Network error');
      } finally {
        btn.disabled = false;
        btn.textContent = 'Move';
      }
    };

    window.restoreInventoryRow = async function(id) {
      if (!confirm('Are you sure you want to restore this item to active inventory?')) return;
      try {
        const res = await fetch(`/api/inventory/${id}/restore`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'same-origin'
        });
        if (res.ok) {
          fetchInventoryRows();
          alert('Item restored successfully!');
        } else {
          const err = await res.json();
          alert(err.error || 'Failed to restore item');
        }
      } catch (err) {
        alert('Network error');
      }
    };

    window.openEditInventoryModal = function(item) {
      const modalBody = document.getElementById('editInventoryDashboardModalBody');
      modalBody.innerHTML = `
        <input type="hidden" name="id" value="${item.id}">
        <div class="mb-3"><label class="form-label">IT SPOC</label><input type="text" class="form-control" name="itSpoc" value="${item.itSpoc || ''}" readonly></div>
        <div class="mb-3"><label class="form-label">User type</label><select class="form-select" name="userType" id="editUserTypeSelect" required><option value="Single" ${item.userType === 'Single' ? 'selected' : ''}>Single</option><option value="Multiple" ${item.userType === 'Multiple' ? 'selected' : ''}>Multiple</option></select></div>
        <div class="mb-3"><label class="form-label">Name of user</label><input type="text" class="form-control" name="userName" value="${item.userName || ''}" required></div>
        <div class="mb-3"><label class="form-label">User email ID</label><input type="text" class="form-control" name="userEmail" value="${item.userEmail || ''}" readonly></div>
        <div class="mb-3"><label class="form-label">Email ID</label><input type="email" class="form-control" name="emailId" id="editEmailIdInput" value="${item.emailId || ''}" required pattern="^[^@\s]+@olam-agri\.com$"></div>
        <div id="editEmailIdError" class="text-danger mb-2" style="display:none;"></div>
        <div id="editUserFieldsContainer"></div>
        <div class="mb-3"><label class="form-label">Device type</label><input type="text" class="form-control" name="deviceType" value="${item.deviceType || ''}" readonly></div>
        <div class="mb-3"><label class="form-label">Device brand</label><input type="text" class="form-control" name="deviceBrand" value="${item.deviceBrand || ''}" readonly></div>
        <div class="mb-3"><label class="form-label">Device model</label><input type="text" class="form-control" name="deviceModel" value="${item.deviceModel || ''}" readonly></div>
        <div class="mb-3"><label class="form-label">Hostname</label><input type="text" class="form-control" name="hostname" value="${item.hostname || ''}"></div>
        <div class="mb-3"><label class="form-label">Windows</label><select class="form-select" name="windows"><option value="">--select--</option><option value="10" ${item.windows === '10' ? 'selected' : ''}>10</option><option value="11" ${item.windows === '11' ? 'selected' : ''}>11</option></select></div>
        <div class="mb-3"><label class="form-label">Windows type</label><select class="form-select" name="windowsType"><option value="">--select--</option><option value="Windows Home" ${item.windowsType === 'Windows Home' ? 'selected' : ''}>Windows Home</option><option value="Windows Pro" ${item.windowsType === 'Windows Pro' ? 'selected' : ''}>Windows Pro</option><option value="Windows Enterprise" ${item.windowsType === 'Windows Enterprise' ? 'selected' : ''}>Windows Enterprise</option><option value="Windows Education" ${item.windowsType === 'Windows Education' ? 'selected' : ''}>Windows Education</option><option value="Windows Pro for Workstations" ${item.windowsType === 'Windows Pro for Workstations' ? 'selected' : ''}>Windows Pro for Workstations</option><option value="Windows Server 2016" ${item.windowsType === 'Windows Server 2016' ? 'selected' : ''}>Windows Server 2016</option><option value="Windows Server 2019" ${item.windowsType === 'Windows Server 2019' ? 'selected' : ''}>Windows Server 2019</option><option value="Windows Server 2022" ${item.windowsType === 'Windows Server 2022' ? 'selected' : ''}>Windows Server 2022</option></select></div>
        <div class="mb-3"><label class="form-label">SAP user</label><select class="form-select" name="sapUser"><option value="">--select--</option><option value="Yes" ${item.sapUser === 'Yes' ? 'selected' : ''}>Yes</option><option value="No" ${item.sapUser === 'No' ? 'selected' : ''}>No</option></select></div>
        <div class="mb-3"><label class="form-label">Microsoft Office</label><select class="form-select" name="microsoftOffice"><option value="">--select--</option><option value="Yes" ${item.microsoftOffice === 'Yes' ? 'selected' : ''}>Yes</option><option value="No" ${item.microsoftOffice === 'No' ? 'selected' : ''}>No</option></select></div>
        <div class="mb-3"><label class="form-label">Serial number</label><input type="text" class="form-control" name="serialNumber" value="${item.serialNumber || ''}" readonly></div>
        <div class="mb-3"><label class="form-label">System RAM</label><input type="text" class="form-control" name="ram" value="${item.ram || ''}"></div>
        <div class="mb-3"><label class="form-label">System ROM</label><input type="text" class="form-control" name="rom" value="${item.rom || ''}"></div>
        <div class="mb-3"><label class="form-label">Hard drive type</label><select class="form-select" name="hardDriveType"><option value="">--select--</option><option value="HDD" ${item.hardDriveType === 'HDD' ? 'selected' : ''}>HDD</option><option value="SSD" ${item.hardDriveType === 'SSD' ? 'selected' : ''}>SSD</option></select></div>
        <div class="mb-3"><label class="form-label">Department</label><input type="text" class="form-control" name="department" value="${item.department || ''}"></div>
        <div class="mb-3"><label class="form-label">Location</label><input type="text" class="form-control" name="location" value="${item.location || ''}" readonly></div>
        <div class="mb-3"><label class="form-label">Zscaler</label><select class="form-select" name="zscaler"><option value="">--select--</option><option value="Yes" ${item.zscaler === 'Yes' ? 'selected' : ''}>Yes</option><option value="No" ${item.zscaler === 'No' ? 'selected' : ''}>No</option></select></div>
        <div class="mb-3"><label class="form-label">Trellix</label><select class="form-select" name="trellix"><option value="">--select--</option><option value="Yes" ${item.trellix === 'Yes' ? 'selected' : ''}>Yes</option><option value="No" ${item.trellix === 'No' ? 'selected' : ''}>No</option></select></div>
        <div class="mb-3"><label class="form-label">SCCM</label><select class="form-select" name="sccm"><option value="">--select--</option><option value="Yes" ${item.sccm === 'Yes' ? 'selected' : ''}>Yes</option><option value="No" ${item.sccm === 'No' ? 'selected' : ''}>No</option></select></div>
        <div class="mb-3"><label class="form-label">Ivanti</label><select class="form-select" name="ivanti"><option value="">--select--</option><option value="Yes" ${item.ivanti === 'Yes' ? 'selected' : ''}>Yes</option><option value="No" ${item.ivanti === 'No' ? 'selected' : ''}>No</option></select></div>
        <div class="mb-3"><label class="form-label">BitLocker</label><select class="form-select" name="bitLocker"><option value="">--select--</option><option value="Yes" ${item.bitLocker === 'Yes' ? 'selected' : ''}>Yes</option><option value="No" ${item.bitLocker === 'No' ? 'selected' : ''}>No</option></select></div>
        <div class="mb-3"><label class="form-label">Secure login</label><select class="form-select" name="secureLogin"><option value="">--select--</option><option value="Yes" ${item.secureLogin === 'Yes' ? 'selected' : ''}>Yes</option><option value="No" ${item.secureLogin === 'No' ? 'selected' : ''}>No</option></select></div>
        <div class="mb-3"><label class="form-label">Joined to Olam domain</label><select class="form-select" name="joinedToOlamDomain"><option value="">--select--</option><option value="Yes" ${item.joinedToOlamDomain === 'Yes' ? 'selected' : ''}>Yes</option><option value="No" ${item.joinedToOlamDomain === 'No' ? 'selected' : ''}>No</option></select></div>
        <div class="mb-3"><label class="form-label">PO</label><input type="text" class="form-control" name="po" value="${item.po || ''}" readonly></div>
        <div class="mb-3"><label class="form-label">Invoice number</label><input type="text" class="form-control" name="invoiceNumber" value="${item.invoiceNumber || ''}" readonly></div>
        <div class="mb-3"><label class="form-label">Purchase date</label><input type="date" class="form-control" name="purchaseDate" value="${(item.purchaseDate || '').split('T')[0]}" readonly></div>
        <div class="mb-3"><label class="form-label">Warranty</label><input type="text" class="form-control" name="warranty" value="${item.warranty || ''}" readonly></div>
        <div class="mb-3"><label class="form-label">HR</label><input type="text" class="form-control" name="hr" value="${item.hr || ''}"></div>
      `;
      new bootstrap.Modal(document.getElementById('editInventoryDashboardModal')).show();

      // Add validation for Email ID
      const form = document.getElementById('editInventoryDashboardForm');
      if (form) {
        form.onsubmit = null;
        form.addEventListener('submit', async function(e) {
          const emailInput = document.getElementById('editEmailIdInput');
          const errorDiv = document.getElementById('editEmailIdError');
          if (emailInput && !/^.+@olam-agri\.com$/.test(emailInput.value.trim())) {
            e.preventDefault();
            errorDiv.textContent = 'Email ID must end with @olam-agri.com';
            errorDiv.style.display = 'block';
            emailInput.classList.add('is-invalid');
            return false;
          } else if (errorDiv) {
            errorDiv.textContent = '';
            errorDiv.style.display = 'none';
            emailInput.classList.remove('is-invalid');
          }
          e.preventDefault();
          const formData = new FormData(form);
          const data = Object.fromEntries(formData.entries());
          const id = data.id;
          delete data.id;
          const btn = form.querySelector('button[type="submit"]');
          btn.disabled = true;
          btn.textContent = 'Saving...';
          try {
            const res = await fetch(`/api/inventory/${id}`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              credentials: 'same-origin',
              body: JSON.stringify(data)
            });
            if (res.ok) {
              bootstrap.Modal.getInstance(document.getElementById('editInventoryDashboardModal')).hide();
              fetchInventoryRows();
              alert('Inventory row updated successfully!');
            } else {
              const err = await res.json();
              alert(err.error || 'Failed to update inventory row');
            }
          } catch (err) {
            alert('Network error');
          } finally {
            btn.disabled = false;
            btn.textContent = 'Save Changes';
          }
        });
      }
    };

    window.openMoveInventoryModal = function(item) {
      const modalBody = document.getElementById('moveInventoryDashboardModalBody');
      modalBody.innerHTML = `
        <input type="hidden" name="id" value="${item.id}">
        <div class="mb-3"><label class="form-label">Current Department</label><input type="text" class="form-control" value="${item.department || ''}" readonly></div>
        <div class="mb-3"><label class="form-label">Current Location</label><input type="text" class="form-control" value="${item.location || ''}" readonly></div>
        <div class="mb-3"><label class="form-label">Reason for Moving (Description)</label><textarea class="form-control" name="description" rows="3" placeholder="Please state the reason why this item is being moved to spares..." required>${item.description || ''}</textarea></div>
      `;
      new bootstrap.Modal(document.getElementById('moveInventoryDashboardModal')).show();
    };

    window.openMoveToScrapModal = function(item) {
      const modalBody = document.getElementById('moveToScrapInventoryDashboardModalBody');
      modalBody.innerHTML = `
        <input type="hidden" name="id" value="${item.id}">
        <div class="mb-3"><label class="form-label">Current Department</label><input type="text" class="form-control" value="${item.department || ''}" readonly></div>
        <div class="mb-3"><label class="form-label">Current Location</label><input type="text" class="form-control" value="${item.location || ''}" readonly></div>
        <div class="mb-3"><label class="form-label">Reason for Moving to Scrap (Description)</label><textarea class="form-control" name="description" rows="3" placeholder="Please state the reason why this item is being moved to scrap..." required>${item.description || ''}</textarea></div>
      `;
      new bootstrap.Modal(document.getElementById('moveToScrapInventoryDashboardModal')).show();
    };
    document.getElementById('moveToScrapInventoryDashboardForm').onsubmit = async function(e) {
      e.preventDefault();
      const form = e.target;
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      data.status = 'scrap';
      const id = data.id;
      delete data.id;
      const btn = form.querySelector('button[type="submit"]');
      btn.disabled = true;
      btn.textContent = 'Moving...';
      try {
        const res = await fetch(`/api/inventory/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'same-origin',
          body: JSON.stringify(data)
        });
        if (res.ok) {
          bootstrap.Modal.getInstance(document.getElementById('moveToScrapInventoryDashboardModal')).hide();
          fetchInventoryRows();
          alert('Inventory row moved to scrap!');
        } else {
          const err = await res.json();
          alert(err.error || 'Failed to move inventory row');
        }
      } catch (err) {
        alert('Network error');
      } finally {
        btn.disabled = false;
        btn.textContent = 'Move to Scrap';
      }
    };

    window.openDeleteInventoryModal = function(item) {
      const modalBody = document.getElementById('deleteInventoryDashboardModalBody');
      modalBody.innerHTML = `
        <input type="hidden" name="id" value="${item.id}">
        <div class="mb-3"><label class="form-label">Description (Reason for Deletion)</label><textarea class="form-control" name="description" rows="3" placeholder="Please state the reason why this item is being deleted..." required></textarea></div>
      `;
      new bootstrap.Modal(document.getElementById('deleteInventoryDashboardModal')).show();
    };
    document.getElementById('deleteInventoryDashboardForm').onsubmit = async function(e) {
      e.preventDefault();
      const form = e.target;
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      const id = data.id;
      delete data.id;
      const btn = form.querySelector('button[type="submit"]');
      btn.disabled = true;
      btn.textContent = 'Deleting...';
      try {
        const res = await fetch(`/api/inventory/${id}`, {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'same-origin',
          body: JSON.stringify(data)
        });
        if (res.ok) {
          bootstrap.Modal.getInstance(document.getElementById('deleteInventoryDashboardModal')).hide();
          fetchInventoryRows();
          alert('Item deleted successfully!');
        } else {
          const err = await res.json();
          alert(err.error || 'Failed to delete item');
        }
      } catch (err) {
        alert('Network error');
      } finally {
        btn.disabled = false;
        btn.textContent = 'Delete';
      }
    };

    window.openTransferInventoryModal = async function(item) {
        const modalBody = document.getElementById('transferInventoryDashboardModalBody');
        const res = await fetch('/api/users/transfer-list', { credentials: 'same-origin' });
        if (!res.ok) {
            alert('Failed to load user list for transfer.');
            return;
        }
        const users = await res.json();
        let userOptions = users.map(user => `<option value="${user.id}">${user.username}</option>`).join('');
        
        modalBody.innerHTML = `
            <input type="hidden" name="id" value="${item.id}">
            <div class="mb-3">
                <label class="form-label">Transfer to:</label>
                <select class="form-select" name="targetUserId" required>
                    <option value="">-- Select User --</option>
                    ${userOptions}
                </select>
            </div>
        `;
        
        new bootstrap.Modal(document.getElementById('transferInventoryDashboardModal')).show();
    };

    document.getElementById('transferInventoryDashboardForm').onsubmit = async function(e) {
        e.preventDefault();
        const form = e.target;
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        const id = data.id;
        delete data.id;

        const btn = form.querySelector('button[type="submit"]');
        btn.disabled = true;
        btn.textContent = 'Transferring...';

        try {
            const res = await fetch(`/api/inventory/${id}/transfer`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'same-origin',
                body: JSON.stringify(data)
            });
            if (res.ok) {
                bootstrap.Modal.getInstance(document.getElementById('transferInventoryDashboardModal')).hide();
                fetchInventoryRows();
                alert('Item transferred successfully!');
            } else {
                const err = await res.json();
                alert(err.error || 'Failed to transfer item');
            }
        } catch (err) {
            alert('Network error');
        } finally {
            btn.disabled = false;
            btn.textContent = 'Transfer';
        }
    };
    
    // Initial fetch
    fetchInventoryRows();
  </script>
</body>
</html> 