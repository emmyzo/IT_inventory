<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Management | Olam Agri IT Inventory</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body { background: #f8fafc; min-height: 100vh; }
    .sidebar { background: #fff; min-height: 100vh; box-shadow: 2px 0 8px rgba(0,0,0,0.04); padding: 2rem 1rem 1rem 1rem; position: fixed; left: 0; top: 0; width: 220px; z-index: 100; display: flex; flex-direction: column; gap: 2rem; }
    .sidebar .logo { width: 50px; height: 30px; margin-bottom: 0.5rem; }
    .sidebar .brand-title { font-size: 1.5rem; font-weight: 700; color: #222; margin-bottom: 0.2rem; letter-spacing: -1px; }
    .sidebar .brand-sub { font-size: 1rem; font-weight: 700; color: #009688; margin-bottom: 1.2rem; }
    .sidebar-nav { list-style: none; padding: 0; margin: 0; display: flex; flex-direction: column; gap: 1.2rem; }
    .sidebar-nav li a { color: #222; text-decoration: none; font-weight: 600; font-size: 1.05rem; display: flex; align-items: center; gap: 0.7rem; padding: 0.4rem 0.7rem; border-radius: 6px; transition: background 0.2s, color 0.2s; }
    .sidebar-nav li a.active, .sidebar-nav li a:hover { background: #009688; color: #fff; }
    .main-content { margin-left: 220px; padding: 2rem 2rem 1rem 2rem; }
    .topbar { display: flex; align-items: center; justify-content: space-between; margin-bottom: 2rem; }
    .topbar .user-info { display: flex; align-items: center; gap: 1rem; }
    .topbar .user-avatar { width: 38px; height: 38px; border-radius: 50%; background: #e0e0e0; display: flex; align-items: center; justify-content: center; font-size: 1.3rem; color: #009688; font-weight: 700; }
    .table-section { background: #fff; border-radius: 12px; box-shadow: 0 2px 12px rgba(0,0,0,0.04); padding: 1.5rem 1.2rem; margin-bottom: 2rem; }
    .table-section .section-title { font-size: 1.2rem; font-weight: 700; color: #222; margin-bottom: 1rem; }
    .btn-add { background: #009688; color: #fff; }
    .btn-add:hover { background: #00796b; color: #fff; }
    @media (max-width: 900px) { .main-content { margin-left: 0; padding: 1rem; } .sidebar { position: static; width: 100%; min-height: auto; flex-direction: row; gap: 1rem; padding: 1rem; } }
    @media (max-width: 600px) { .main-content { padding: 0.5rem; } .sidebar { flex-direction: column; align-items: flex-start; } .table-section { padding: 1rem 0.5rem; } }
  </style>
</head>
<body>
  <aside class="sidebar">
    <div style="display: flex; flex-direction: column; align-items: center; justify-content: center;">
      <img src="/images/olam_logo.png" alt="Olam Agri Logo" class="logo">
      <div class="brand-title" style="text-align: center;">Olam Agri</div>
      <div class="brand-sub" style="text-align: center;">IT Inventory</div>
    </div>
    <ul class="sidebar-nav">
      <li><a href="/admin/dashboard" class="<%= (activeTab === 'dashboard') ? 'active' : '' %>"><i class="fa fa-gauge"></i> Dashboard</a></li>
      <li><a href="/admin/users" class="<%= (activeTab === 'users') ? 'active' : '' %>"><i class="fa fa-users"></i> Users</a></li>
      <li><a href="/admin/active" class="<%= (activeTab === 'active') ? 'active' : '' %>"><i class="fa fa-gauge"></i> Active</a></li>
      <li><a href="/admin/spares" class="<%= (activeTab === 'spares') ? 'active' : '' %>"><i class="fa fa-archive"></i> Spares</a></li>
      <li><a href="/admin/scrap" class="<%= (activeTab === 'scrap') ? 'active' : '' %>"><i class="fa fa-recycle"></i> Scrap</a></li>
      <li><a href="/admin/deleted-items" class="<%= (activeTab === 'deleted-items') ? 'active' : '' %>"><i class="fa fa-trash"></i> Deleted Items</a></li>
      <li><a href="/logout"><i class="fa fa-sign-out-alt"></i> Logout</a></li>
    </ul>
  </aside>
  <main class="main-content">
    <div class="topbar">
      <h2 class="mb-0">User Management</h2>
      <div class="user-info">
        <div class="user-avatar"><i class="fa fa-user"></i></div>
        <span class="fw-bold"><%= user.username %></span>
      </div>
    </div>
    <div class="table-section">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <div class="section-title mb-0">Users</div>
        <% if (user.role === 'SUPER_ADMIN' || user.role === 'Admin') { %>
        <button class="btn btn-add" data-bs-toggle="modal" data-bs-target="#addUserModal"><i class="fa fa-plus"></i> Add User</button>
        <% } %>
      </div>
      <div class="table-responsive">
        <table class="table table-bordered align-middle" id="usersTable">
          <thead class="table-light">
            <tr>
              <th>S/N</th>
              <th>Name</th>
              <th>Email</th>
              <th>Role</th>
              <th>Location</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="usersTableBody">
            <!-- Dynamic rows will be injected here by JS -->
          </tbody>
        </table>
      </div>
    </div>
  </main>
  <!-- Add User Modal -->
  <div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <form id="addUserForm">
          <div class="modal-header">
            <h5 class="modal-title" id="addUserModalLabel">Add User</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3"><label class="form-label">Name</label><input type="text" class="form-control" name="name" required></div>
            <div class="mb-3"><label class="form-label">Email</label><input type="email" class="form-control" name="email" required pattern="^[^@\s]+@olam-agri\.com$" title="Email must end with @olam-agri.com"></div>
            <div class="mb-3"><label class="form-label">Password</label><input type="password" class="form-control" name="password" required></div>
            <div class="mb-3"><label class="form-label">Location</label><input type="text" class="form-control" name="location" required></div>
            <% if (user.role === 'SUPER_ADMIN' || user.role === 'Admin') { %>
            <div class="mb-3"><label class="form-label">Role</label>
              <select class="form-select" name="role">
                <option value="User">User</option>
                <option value="Admin">Admin</option>
              </select>
            </div>
            <% } %>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-add">Add User</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <!-- Edit User Modal -->
  <div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <form id="editUserForm">
          <div class="modal-header">
            <h5 class="modal-title" id="editUserModalLabel">Edit User</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <input type="hidden" name="id" id="editUserId">
            <div class="mb-3"><label class="form-label">Name</label><input type="text" class="form-control" name="editUserName" id="editUserName" readonly></div>
            <div class="mb-3"><label class="form-label">Email</label><input type="email" class="form-control" name="editUserEmail" id="editUserEmail" readonly></div>
            <div class="mb-3"><label class="form-label">Location</label><input type="text" class="form-control" name="editUserLocation" id="editUserLocation" readonly></div>
            <div class="mb-3"><label class="form-label">Role</label>
              <input type="text" class="form-control" id="editUserRole" readonly>
              <% if (user.role === 'SUPER_ADMIN' || user.role === 'Admin') { %>
              <label class="form-label mt-2">Change Role</label>
              <select class="form-select" id="editUserRoleDropdown">
                <option value="User">User</option>
                <option value="Admin">Admin</option>
              </select>
              <% } %>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <!-- Delete User Modal -->
  <div class="modal fade" id="deleteUserModal" tabindex="-1" aria-labelledby="deleteUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="deleteUserModalLabel">Delete & Replace User</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body" id="deleteUserModalBody">
          Are you sure you want to delete this user? Please provide details for the replacement user who will take over this user's dashboard and data.
          <form id="replaceUserForm">
            <div class="mb-3"><label class="form-label">Name</label><input type="text" class="form-control" name="name" id="replaceUserName" required></div>
            <div class="mb-3"><label class="form-label">Email</label><input type="email" class="form-control" name="email" id="replaceUserEmail" required pattern="^[^@\s]+@olam-agri\.com$" title="Email must end with @olam-agri.com"></div>
            <div class="mb-3"><label class="form-label">Password</label><input type="password" class="form-control" name="password" id="replaceUserPassword" required></div>
            <div class="mb-3"><label class="form-label">Role</label>
              <select class="form-select" name="roleId" id="replaceUserRoleId" required>
                <option value="">Select Role</option>
              </select>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger" id="confirmReplaceUserBtn">Delete & Replace</button>
        </div>
      </div>
    </div>
  </div>
  <!-- Transfer User Modal -->
  <div class="modal fade" id="transferUserModal" tabindex="-1" aria-labelledby="transferUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <form id="transferUserForm">
          <div class="modal-header">
            <h5 class="modal-title" id="transferUserModalLabel">Transfer User Dashboard</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <input type="hidden" name="fromUserId" id="transferFromUserId">
            <div class="mb-3"><label class="form-label">From User</label><input type="text" class="form-control" id="transferFromUserName" readonly></div>
            <div class="mb-3"><label class="form-label">Transfer To</label>
              <select class="form-select" name="toUserId" id="transferToUserDropdown" required></select>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary">Transfer</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <!-- Change Password Modal -->
  <div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <form id="changePasswordForm">
          <div class="modal-header">
            <h5 class="modal-title" id="changePasswordModalLabel">Change User Password</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <input type="hidden" name="userId" id="changePasswordUserId">
            <div class="mb-3"><label class="form-label">User</label><input type="text" class="form-control" id="changePasswordUserName" readonly></div>
            <div class="mb-3"><label class="form-label">New Password</label><input type="password" class="form-control" name="newPassword" id="changePasswordNew" required></div>
            <div class="mb-3"><label class="form-label">Confirm Password</label><input type="password" class="form-control" id="changePasswordConfirm" required></div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary">Change Password</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <!-- Toast for feedback -->
  <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 2000;">
    <div id="usersToast" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="d-flex">
        <div class="toast-body" id="usersToastBody">Action successful!</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    </div>
  </div>
  <script>
    // EJS will inject the user object here. Ignore linter warning if seen in editor.
    // eslint-disable-next-line
    const user = <%- JSON.stringify(user || null) %>;
  </script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    let allUsers = [];
    async function fetchUsers() {
      const res = await fetch('/api/users-list');
      if (!res.ok) return;
      allUsers = await res.json();
      const tbody = document.getElementById('usersTableBody');
      tbody.innerHTML = '';
      allUsers.forEach((u, i) => {
        const tr = document.createElement('tr');
        let canEdit = false, canDelete = false, canTransfer = false, canReset = false;
        if (user.role === 'SUPER_ADMIN' && u.role !== 'SUPER_ADMIN') {
          canEdit = canDelete = canTransfer = canReset = true;
        }
        if (user.role === 'Admin' && u.role === 'User') {
          canEdit = canDelete = canTransfer = canReset = true;
        }
        let actionButtons = '';
        // Reset password
        actionButtons += `<button class="btn btn-sm btn-outline-warning" onclick="${canReset ? `openChangePasswordModal(${u.id}, '${u.name}', '${u.email}', '${u.role}')` : ''}" style="${canReset ? '' : 'pointer-events: none; opacity: 0.5;'}"><i class="fa fa-key"></i></button>`;
        // Edit
        actionButtons += `<button class="btn btn-sm btn-outline-primary me-1" onclick="${canEdit ? `openEditUserModal(${u.id}, '${u.name.replace(/'/g, "&#39;")}', '${u.email}', '${u.role}', '${u.location || ''}')` : ''}" style="${canEdit ? '' : 'pointer-events: none; opacity: 0.5;'}"><i class="fa fa-edit"></i></button>`;
        // Delete
        actionButtons += `<button class="btn btn-sm btn-outline-danger" onclick="${canDelete ? `openDeleteUserModal(${u.id}, '${u.name.replace(/'/g, "&#39;")}', '${u.role}')` : ''}" style="${canDelete ? '' : 'pointer-events: none; opacity: 0.5;'}"><i class="fa fa-trash"></i></button>`;
        // Transfer
        actionButtons += `<button class="btn btn-sm btn-outline-info" onclick="${canTransfer ? `openTransferUserModal(${u.id}, '${u.name.replace(/'/g, "&#39;")}', '${u.email}', '${u.role}')` : ''}" style="${canTransfer ? '' : 'pointer-events: none; opacity: 0.5;'}"><i class="fa fa-paper-plane"></i></button>`;
        tr.innerHTML =
          '<td>' + (i + 1) + '</td>' +
          '<td>' + u.name + '</td>' +
          '<td>' + u.email + '</td>' +
          '<td>' + u.role.replace('_', ' ') + '</td>' +
          '<td>' + (u.location ? u.location.replace(/'/g, "&#39;") : '') + '</td>' +
          '<td>' + actionButtons + '</td>';
        tbody.appendChild(tr);
      });
    }
    fetchUsers();

    function showToast(msg) {
      document.getElementById('usersToastBody').textContent = msg;
      const toast = new bootstrap.Toast(document.getElementById('usersToast'));
      toast.show();
    }

    document.getElementById('addUserForm').onsubmit = async function(e) {
      e.preventDefault();
      const form = e.target;
      const data = Object.fromEntries(new FormData(form));
      const btn = form.querySelector('button[type="submit"]');
      btn.disabled = true;
      const res = await fetch('/api/users', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      btn.disabled = false;
      if (res.ok) {
        form.reset();
        bootstrap.Modal.getInstance(document.getElementById('addUserModal')).hide();
        showToast('User added successfully!');
        fetchUsers();
      } else {
        const err = await res.json();
        showToast(err.error || 'Failed to add user');
      }
    };

    let deleteUserId = null;
    let deleteUserRole = null;
    function openDeleteUserModal(id, name, role) {
      if (role === 'SUPER_ADMIN') return;
      deleteUserId = id;
      deleteUserRole = role;
      document.getElementById('deleteUserModalBody').querySelector('form').reset();
      document.getElementById('deleteUserModalBody').querySelector('form').style.display = 'block';
      // Fetch roles for dropdown
      fetch('/admin/roles').then(r => r.json()).then(roles => {
        const dropdown = document.getElementById('replaceUserRoleId');
        dropdown.innerHTML = '<option value="">Select Role</option>';
        roles.forEach(role => {
          if (role.name !== 'SUPER_ADMIN') {
            dropdown.innerHTML += `<option value="${role.id}">${role.name}</option>`;
          }
        });
      });
      new bootstrap.Modal(document.getElementById('deleteUserModal')).show();
    }
    document.getElementById('confirmReplaceUserBtn').onclick = async function() {
      if (!deleteUserId) return;
      const form = document.getElementById('replaceUserForm');
      if (!form.reportValidity()) return;
      const data = {
        oldUserId: deleteUserId,
        name: form.name.value,
        email: form.email.value,
        password: form.password.value,
        roleId: form.roleId.value
      };
      document.getElementById('confirmReplaceUserBtn').disabled = true;
      const res = await fetch('/admin/users/replace', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      document.getElementById('confirmReplaceUserBtn').disabled = false;
      bootstrap.Modal.getInstance(document.getElementById('deleteUserModal')).hide();
      if (res.ok) {
        showToast('User replaced and data transferred successfully!');
        fetchUsers();
      } else {
        const err = await res.json();
        showToast(err.error || 'Failed to replace user');
      }
      deleteUserId = null;
      deleteUserRole = null;
    };

    let editUserId = null;
    function openEditUserModal(id, name, email, role, location) {
      if (role === 'SUPER_ADMIN') return;
      editUserId = id;
      document.getElementById('editUserId').value = id;
      document.getElementById('editUserName').value = name;
      document.getElementById('editUserEmail').value = email;
      document.getElementById('editUserLocation').value = location || '';
      document.getElementById('editUserRole').value = role;
      var dropdown = document.getElementById('editUserRoleDropdown');
      if (dropdown) dropdown.value = role;
      new bootstrap.Modal(document.getElementById('editUserModal')).show();
    }
    document.getElementById('editUserForm').onsubmit = async function(e) {
      e.preventDefault();
      const id = document.getElementById('editUserId').value;
      const name = document.getElementById('editUserName').value;
      const email = document.getElementById('editUserEmail').value;
      const location = document.getElementById('editUserLocation').value;
      let role = document.getElementById('editUserRole').value;
      var dropdown = document.getElementById('editUserRoleDropdown');
      if (dropdown) role = dropdown.value;
      const res = await fetch(`/admin/users/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username: name, email, location, roleId: undefined })
      });
      bootstrap.Modal.getInstance(document.getElementById('editUserModal')).hide();
      if (res.ok) {
        showToast('User updated successfully!');
        fetchUsers();
      } else {
        showToast('Failed to update user');
      }
    };

    function openTransferUserModal(userId, userName, userEmail, userRole) {
      document.getElementById('transferFromUserId').value = userId;
      document.getElementById('transferFromUserName').value = userName + ' (' + userEmail + ')';
      const dropdown = document.getElementById('transferToUserDropdown');
      dropdown.innerHTML = '';
      allUsers.forEach(u => {
        if (u.id !== userId && u.role !== 'SUPER_ADMIN') {
          const opt = document.createElement('option');
          opt.value = u.id;
          opt.textContent = u.name + ' (' + u.email + ')';
          dropdown.appendChild(opt);
        }
      });
      new bootstrap.Modal(document.getElementById('transferUserModal')).show();
    }
    document.getElementById('transferUserForm').onsubmit = async function(e) {
      e.preventDefault();
      const fromUserId = document.getElementById('transferFromUserId').value;
      const toUserId = document.getElementById('transferToUserDropdown').value;
      const btn = this.querySelector('button[type="submit"]');
      btn.disabled = true;
      btn.textContent = 'Transferring...';
      try {
        const res = await fetch(`/admin/users/transfer-dashboard`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ fromUserId, toUserId })
        });
        if (res.ok) {
          bootstrap.Modal.getInstance(document.getElementById('transferUserModal')).hide();
          showToast('Dashboard transferred successfully!');
          fetchUsers();
        } else {
          const err = await res.json();
          showToast(err.error || 'Failed to transfer dashboard');
        }
      } catch (err) {
        showToast('Network error');
      } finally {
        btn.disabled = false;
        btn.textContent = 'Transfer';
      }
    };

    function openChangePasswordModal(userId, userName, userEmail, userRole) {
      document.getElementById('changePasswordUserId').value = userId;
      document.getElementById('changePasswordUserName').value = userName + ' (' + userEmail + ')';
      document.getElementById('changePasswordNew').value = '';
      document.getElementById('changePasswordConfirm').value = '';
      new bootstrap.Modal(document.getElementById('changePasswordModal')).show();
    }
    document.getElementById('changePasswordForm').onsubmit = async function(e) {
      e.preventDefault();
      const userId = document.getElementById('changePasswordUserId').value;
      const newPassword = document.getElementById('changePasswordNew').value;
      const confirmPassword = document.getElementById('changePasswordConfirm').value;
      if (newPassword !== confirmPassword) {
        showToast('Passwords do not match!');
        return;
      }
      const btn = this.querySelector('button[type="submit"]');
      btn.disabled = true;
      btn.textContent = 'Changing...';
      try {
        const res = await fetch(`/admin/users/${userId}/change-password`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ newPassword })
        });
        if (res.ok) {
          bootstrap.Modal.getInstance(document.getElementById('changePasswordModal')).hide();
          showToast('Password changed successfully!');
        } else {
          const err = await res.json();
          showToast(err.error || 'Failed to change password');
        }
      } catch (err) {
        showToast('Network error');
      } finally {
        btn.disabled = false;
        btn.textContent = 'Change Password';
      }
    };
  </script>
</body>
</html> 